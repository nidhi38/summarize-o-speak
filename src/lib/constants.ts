
import { Language } from "./types";

export const SUPPORTED_FILE_TYPES = [
  "application/pdf",
  "text/plain",
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
];

export const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB

export const SUPPORTED_LANGUAGES: Language[] = [
  { code: "en", name: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
  { code: "hi", name: "Hindi", flag: "ЁЯЗоЁЯЗ│" },
  { code: "es", name: "Spanish", flag: "ЁЯЗкЁЯЗ╕" },
  { code: "fr", name: "French", flag: "ЁЯЗлЁЯЗ╖" },
  { code: "de", name: "German", flag: "ЁЯЗйЁЯЗк" },
  { code: "it", name: "Italian", flag: "ЁЯЗоЁЯЗ╣" },
  { code: "pt", name: "Portuguese", flag: "ЁЯЗ╡ЁЯЗ╣" },
  { code: "ru", name: "Russian", flag: "ЁЯЗ╖ЁЯЗ║" },
  { code: "zh", name: "Chinese", flag: "ЁЯЗиЁЯЗ│" },
  { code: "ja", name: "Japanese", flag: "ЁЯЗпЁЯЗ╡" },
  { code: "ko", name: "Korean", flag: "ЁЯЗ░ЁЯЗ╖" },
  { code: "ar", name: "Arabic", flag: "ЁЯЗ╕ЁЯЗж" },
];

export const DEFAULT_LANGUAGE = "en";

// Helper function to check for Devanagari script (used for Hindi detection)
export const containsDevanagariScript = (text: string): boolean => {
  return /[\u0900-\u097F]/.test(text);
};

// Language-specific text samples for better text-to-speech
export const HINDI_TEXT_SAMPLES = {
  welcome: "рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
  hello: "рдирдорд╕реНрддреЗ",
  speak: "рдмреЛрд▓реЗрдВ",
  listen: "рд╕реБрдиреЗрдВ",
  translate: "рдЕрдиреБрд╡рд╛рдж рдХрд░реЗрдВ",
  generate: "рдЙрддреНрдкрдиреНрди рдХрд░реЗрдВ",
  stop: "рд░реЛрдХреЗрдВ",
  start: "рд╢реБрд░реВ рдХрд░реЗрдВ",
  typeHere: "рдпрд╣рд╛рдВ рдЯрд╛рдЗрдк рдХрд░реЗрдВ рдпрд╛ рдмреЛрд▓реЗрдВ",
  processing: "рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рд╣реЛ рд░рд╣реА рд╣реИ...",
  done: "рдкреВрд░рд╛ рд╣реБрдЖ",
  audio: "рдСрдбрд┐рдпреЛ",
  text: "рдЯреЗрдХреНрд╕реНрдЯ",
  speechConverter: "рднрд╛рд╖рдг рдХрдирд╡рд░реНрдЯрд░",
  language: "рднрд╛рд╖рд╛",
  record: "рд░рд┐рдХреЙрд░реНрдб",
  recording: "рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ",
  recentConversions: "рд╣рд╛рд▓ рдХреЗ рд░реВрдкрд╛рдВрддрд░рдг",
  selectLanguage: "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
  generateAudio: "рдСрдбрд┐рдпреЛ рдЙрддреНрдкрдиреНрди рдХрд░реЗрдВ",
  stopRecording: "рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд░реЛрдХреЗрдВ",
  recordSpeech: "рднрд╛рд╖рдг рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдВ", 
  translating: "рдЕрдиреБрд╡рд╛рдж рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
  translationComplete: "рдЕрдиреБрд╡рд╛рдж рдкреВрд░рд╛ рд╣реБрдЖ",
  audioGenerated: "рдСрдбрд┐рдпреЛ рдЙрддреНрдкрдиреНрди рд╣реБрдЖ",
  playAudio: "рдСрдбрд┐рдпреЛ рдЪрд▓рд╛рдПрдВ",
  pauseAudio: "рдСрдбрд┐рдпреЛ рд░реЛрдХреЗрдВ",
  typeOrSpeak: "рдпрд╣рд╛рдВ рдЯрд╛рдЗрдк рдХрд░реЗрдВ рдпрд╛ рдмреЛрд▓реЗрдВ",
  errorMessage: "рдХреБрдЫ рдЧрд▓рдд рд╣реЛ рдЧрдпрд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
  noHindiVoice: "рд╣рд┐рдВрджреА рдЖрд╡рд╛рдЬрд╝ рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ рдПрдХ рд╣рд┐рдВрджреА рдЖрд╡рд╛рдЬрд╝ рд╡рд╛рд▓рд╛ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВред",
  hindiTranslationComplete: "рд╣рд┐рдВрджреА рдЕрдиреБрд╡рд╛рдж рдкреВрд░рд╛ рд╣реБрдЖ",
  hindiSpeechComplete: "рд╣рд┐рдВрджреА рд╡рд╛рдгреА рд░реВрдкрд╛рдВрддрд░рдг рдкреВрд░рд╛ рд╣реБрдЖ",
  speechConverterTitle: "рд╡рд╛рдгреА рд░реВрдкрд╛рдВрддрд░рдХ",
  audioConversion: "рдСрдбрд┐рдпреЛ рд░реВрдкрд╛рдВрддрд░рдг",
  convertTextSpeech: "рдЯреЗрдХреНрд╕реНрдЯ рд╕реЗ рд╡рд╛рдгреА рд░реВрдкрд╛рдВрддрд░рдг рдХрд░реЗрдВ",
  speakClearly: "рдорд╛рдЗрдХреНрд░реЛрдлрд╝реЛрди рдореЗрдВ рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдмреЛрд▓реЗрдВ",
  hindiVoiceNotice: "рд╣рд┐рдВрджреА рдЖрд╡рд╛рдЬрд╝ рдЙрдкрд▓рдмреНрдз рд╣реИ! рдЖрдк рд╣рд┐рдВрджреА рдореЗрдВ рдмреЛрд▓ рдФрд░ рд╕реБрди рд╕рдХрддреЗ рд╣реИрдВред",
  enhancedExperience: "рдмреЗрд╣рддрд░ рдЕрдиреБрднрд╡ рдХреЗ рд▓рд┐рдП",
  textSample1: "рдпрд╣ рд╣рд┐рдВрджреА рдореЗрдВ рдПрдХ рдирдореВрдирд╛ рд╡рд╛рдХреНрдп рд╣реИ",
  textSample2: "рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рднрд╛рд░рдд рдХреА рдкреНрд░рдореБрдЦ рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ рд╕реЗ рдПрдХ рд╣реИ",
  textSample3: "рдореБрдЭреЗ рд╣рд┐рдВрджреА рдореЗрдВ рдмрд╛рдд рдХрд░рдирд╛ рдЕрдЪреНрдЫрд╛ рд▓рдЧрддрд╛ рд╣реИ",
  voiceQualityGood: "рдЖрд╡рд╛рдЬрд╝ рдХреА рдЧреБрдгрд╡рддреНрддрд╛ рдЕрдЪреНрдЫреА рд╣реИ",
  voiceQualityBad: "рдЖрд╡рд╛рдЬрд╝ рдХреА рдЧреБрдгрд╡рддреНрддрд╛ рдЦрд░рд╛рдм рд╣реИ",
  tryAgain: "рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ",
  success: "рд╕рдлрд▓",
  failure: "рд╡рд┐рдлрд▓",
  languageDetected: "рдкрд╣рдЪрд╛рдиреА рдЧрдИ рднрд╛рд╖рд╛",
  speakNow: "рдЕрдм рдмреЛрд▓реЗрдВ",
  listening: "рд╕реБрди рд░рд╣рд╛ рд╣реИ...",
  notListening: "рд╕реБрди рдирд╣реАрдВ рд░рд╣рд╛ рд╣реИ",
  // Adding date format related translations
  createdOn: "рдмрдирд╛рдпрд╛ рдЧрдпрд╛",
  today: "рдЖрдЬ",
  yesterday: "рдХрд▓",
};

// Adding sample text for other languages to help with translation and TTS
export const LANGUAGE_SAMPLES = {
  es: {
    textSample1: "Esta es una frase de ejemplo en espa├▒ol",
    textSample2: "El espa├▒ol es uno de los idiomas m├бs hablados del mundo",
    textSample3: "Me gusta hablar en espa├▒ol"
  },
  fr: {
    textSample1: "C'est une phrase d'exemple en fran├зais",
    textSample2: "Le fran├зais est l'une des langues les plus parl├йes au monde",
    textSample3: "J'aime parler en fran├зais"
  },
  de: {
    textSample1: "Dies ist ein Beispielsatz auf Deutsch",
    textSample2: "Deutsch ist eine der meistgesprochenen Sprachen in Europa",
    textSample3: "Ich spreche gerne Deutsch"
  },
  zh: {
    textSample1: "ш┐ЩцШпф╕Аф╕кф╕нцЦЗчд║ф╛ЛхПехнР",
    textSample2: "ф╕нцЦЗцШпф╕ЦчХМф╕Кф╜┐чФицЬАх╣┐ц│ЫчЪДшпншиАф╣Лф╕А",
    textSample3: "цИСхЦЬцмвшп┤ф╕нцЦЗ"
  },
  ja: {
    textSample1: "уБУуВМуБпцЧецЬмшкЮуБоуВ╡уГ│уГЧуГлцЦЗуБзуБЩ",
    textSample2: "цЧецЬмшкЮуБпцЧецЬмуБоф╕╗шжБшиАшкЮуБзуБЩ",
    textSample3: "чзБуБпцЧецЬмшкЮуВТшй▒уБЩуБоуБМхе╜уБНуБзуБЩ"
  },
  ru: {
    textSample1: "╨н╤В╨╛ ╨┐╤А╨╕╨╝╨╡╤А ╨┐╤А╨╡╨┤╨╗╨╛╨╢╨╡╨╜╨╕╤П ╨╜╨░ ╤А╤Г╤Б╤Б╨║╨╛╨╝ ╤П╨╖╤Л╨║╨╡",
    textSample2: "╨а╤Г╤Б╤Б╨║╨╕╨╣ ╤П╨▓╨╗╤П╨╡╤В╤Б╤П ╨╛╨┤╨╜╨╕╨╝ ╨╕╨╖ ╨╛╤Б╨╜╨╛╨▓╨╜╤Л╤Е ╤П╨╖╤Л╨║╨╛╨▓ ╨а╨╛╤Б╤Б╨╕╨╕",
    textSample3: "╨Ь╨╜╨╡ ╨╜╤А╨░╨▓╨╕╤В╤Б╤П ╨│╨╛╨▓╨╛╤А╨╕╤В╤М ╨┐╨╛-╤А╤Г╤Б╤Б╨║╨╕"
  }
};
